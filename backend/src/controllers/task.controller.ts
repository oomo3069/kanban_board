import { Request, Response } from "express";
import pool from "../config/db";

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Task
export const createTask = async (req: Request, res: Response) => {
  try {
    const user = (req as any).user;
    const { board_id, name, description } = req.body;

    const board = await pool.query(`SELECT * FROM boards WHERE id = $1 AND deleted_at IS NULL`, [board_id]);
    if (board.rowCount === 0) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î" });

    const member = await pool.query(
      `SELECT * FROM board_members WHERE board_id = $1 AND customer_id = $2 AND status = true`,
      [board_id, user.id]
    );
    if (member.rowCount === 0) return res.status(403).json({ error: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ" });

    const task = await pool.query(
      `INSERT INTO tasks (board_id, created_by, name, description) VALUES ($1, $2, $3, $4) RETURNING *`,
      [board_id, user.id, name, description]
    );

    res.status(201).json({ message: "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", task: task.rows[0] });
  } catch (err: any) {
    res.status(500).json({ error: err.message });
  }
};

// ‚úÖ ‡∏î‡∏π Task ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ö‡∏≠‡∏£‡πå‡∏î
export const getTasksByBoard = async (req: Request, res: Response) => {
  const user = (req as any).user;
  const board_id = req.params.board_id;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡∏≠‡∏£‡πå‡∏î
    const boardRes = await pool.query(`SELECT * FROM boards WHERE id = $1`, [board_id]);
    if (boardRes.rowCount === 0) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î" });

    const board = boardRes.rows[0];
    const isOwner = board.owner_id === user.id;

    const memberRes = await pool.query(
      `SELECT * FROM board_members WHERE board_id = $1 AND customer_id = $2 AND status = true`,
      [board_id, user.id]
    );
    if (!isOwner && memberRes.rowCount === 0) {
      return res.status(403).json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ" });
    }

    // ‡∏î‡∏∂‡∏á tasks
    const taskRes = await pool.query(
      `SELECT * FROM tasks WHERE board_id = $1 ORDER BY created_at ASC`,
      [board_id]
    );

    const tasks = taskRes.rows;

    // ‡∏î‡∏∂‡∏á tags ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å task
    const taskIds = tasks.map(t => t.id);
    const tagRes = await pool.query(
      `SELECT * FROM tags WHERE task_id = ANY($1::int[])`,
      [taskIds]
    );

    const tagsByTask: { [key: number]: any[] } = {};
    for (const tag of tagRes.rows) {
      if (!tagsByTask[tag.task_id]) {
        tagsByTask[tag.task_id] = [];
      }
      tagsByTask[tag.task_id].push(tag);
    }

    // ‡∏£‡∏ß‡∏° tags ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ task
    const tasksWithTags = tasks.map(task => ({
      ...task,
      tags: tagsByTask[task.id] || [],
    }));

    res.json({ tasks: tasksWithTags });
  } catch (err: any) {
    console.error("Error fetching tasks:", err);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tasks" });
  }
};

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Task (Owner ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
export const updateTask = async (req: Request, res: Response) => {
  try {
    const user = (req as any).user;
    const task_id = req.params.id;
    const { name, description, status } = req.body;

    const task = await pool.query(`SELECT * FROM tasks WHERE id = $1`, [task_id]);
    if (task.rowCount === 0) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Task" });

    const board = await pool.query(`SELECT * FROM boards WHERE id = $1`, [task.rows[0].board_id]);

    const member = await pool.query(
      `SELECT * FROM board_members WHERE board_id = $1 AND customer_id = $2 AND status = true`,
      [task.rows[0].board_id, user.id]
    );
    const isOwner = board.rows[0].owner_id === user.id;

    if (!isOwner && member.rowCount === 0)
      return res.status(403).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Task ‡∏ô‡∏µ‡πâ" });

    const updated = await pool.query(
      `UPDATE tasks SET name = $1, description = $2, status = $3, updated_at = CURRENT_TIMESTAMP WHERE id = $4 RETURNING *`,
      [name, description, status, task_id]
    );

    res.json({ message: "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", task: updated.rows[0] });
  } catch (err: any) {
    res.status(500).json({ error: err.message });
  }
};

// ‚úÖ ‡∏•‡∏ö Task
export const deleteTask = async (req: Request, res: Response) => {
  try {
    const user = (req as any).user;
    const task_id = req.params.id;

    const task = await pool.query(`SELECT * FROM tasks WHERE id = $1`, [task_id]);
    if (task.rowCount === 0) return res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Task" });

    const board = await pool.query(`SELECT * FROM boards WHERE id = $1`, [task.rows[0].board_id]);

    const member = await pool.query(
      `SELECT * FROM board_members WHERE board_id = $1 AND customer_id = $2 AND status = true`,
      [task.rows[0].board_id, user.id]
    );
    const isOwner = board.rows[0].owner_id === user.id;

    if (!isOwner && member.rowCount === 0)
      return res.status(403).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö Task ‡∏ô‡∏µ‡πâ" });

    await pool.query(`UPDATE tasks SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1`, [task_id]);

    res.json({ message: "üóëÔ∏è ‡∏•‡∏ö Task ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err: any) {
    res.status(500).json({ error: err.message });
  }
};
