import { Request, Response ,NextFunction } from "express";
import bcrypt from "bcrypt";
import pool from "../config/db";
import jwt from "jsonwebtoken";


export const registerCustomer = async (req: Request, res: Response) => {
  try {
    const { name, email, phone_number, password, confirmPassword } = req.body;

    const checkEmail = await pool.query(`SELECT * FROM customers WHERE email = $1`, [email]);
    if (checkEmail.rows.length > 0) {
      res.status(400).json({ error: "‚ùå Email ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
      return;
    }

    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{7,}$/;
    if (!passwordRegex.test(password)) {
      res.status(400).json({ error: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 7 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });
      return;
    }

    if (password !== confirmPassword) {
      res.status(400).json({ error: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô" });
      return;
    }

    const hashedPassword = await bcrypt.hash(password, 10);


    const insertResult = await pool.query(
      `INSERT INTO customers (name, email, phone_number, password) 
       VALUES ($1, $2, $3, $4) RETURNING id, name, email, phone_number, created_at`,
      [name, email, phone_number, hashedPassword]
    );

    const newCustomer = insertResult.rows[0];
    const inviteCode = newCustomer.id.toString().padStart(4, "0");

    await pool.query(`UPDATE customers SET invite_code = $1 WHERE id = $2`, [inviteCode, newCustomer.id]);

    res.status(201).json({
      message: "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      customer: { ...newCustomer, invite_code: inviteCode }
    });
  } catch (err: any) {
    res.status(500).json({ error: err.message });
  }
};

export const loginCustomer = async (req: Request, res: Response) => {
  try {
    const { email, password } = req.body;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ email ‡πÉ‡∏ô database
    const result = await pool.query(`SELECT * FROM customers WHERE email = $1`, [email]);
    if (result.rows.length === 0) {
      res.status(401).json({ error: "‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" });
      return;
    }

    const customer = result.rows[0];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const isMatch = await bcrypt.compare(password, customer.password);
    if (!isMatch) {
      res.status(401).json({ error: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      return;
    }
    const JWT_SECRET = process.env.JWT_SECRET as string;
    
    // üî• ‡πÉ‡∏ä‡πâ key ‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å .env ‡∏Å‡πà‡∏≠‡∏ô
    const token = jwt.sign(
      { id: customer.id, email: customer.email },
      JWT_SECRET, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
      { expiresIn: "1h" }
    );

    res.json({ message: "‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", token });
  } catch (err: any) {
    res.status(500).json({ error: err.message });
  }
};

export const getCustomerProfile = async (req: Request, res: Response) => {
  try {
      console.log("‚úÖ getCustomerProfile ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ");

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å JWT ‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß
      const user = (req as any).user;
      console.log("üì¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å JWT:", user);

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const result = await pool.query(
          `SELECT id, name, invite_code, email, phone_number, created_at FROM customers WHERE id = $1`,
          [user.id]
      );

      if (result.rows.length === 0) {
          res.status(404).json({ error: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
          return;
      }

      res.json({ message: "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", customer: result.rows[0] });
  } catch (err: any) {
      res.status(500).json({ error: err.message });
  }
};

